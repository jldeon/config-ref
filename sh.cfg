# Init the common elements for all shells

source $MYCFGDIR/sh-func.cfg

# tmux and keychain might be here
pathadd $HOME/.local/bin

# Try to re-use an existing SSH agent (for local key storage)
# This is the systemd method:
# https://unix.stackexchange.com/questions/339840
if [ -f $XDG_RUNTIME_DIR/ssh-agent.socket ]; then
    if [ "" -eq $SSH_AUTH_SOCK ]; then
        export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"
    fi
else
# Use keychain if possible
    if [ -f $HOME/.ssh/id_rsa ]; then
        if command -v keychain &> /dev/null ; then
            eval `keychain -q --agents ssh --eval id_rsa`
        fi
    fi
fi

# Try to set up our SSH socket (in case we are forwarding the agent
# to this host instead of running it locally)
if command -v ss &> /dev/null && [ -S "$SSH_AUTH_SOCK" ]; then
    SOCK_VALID=$(ss -a --unix -p | grep $(realpath ~/.ssh/ssh_auth_sock 2>/dev/null) 2>/dev/null)
    if [ ! -S ~/.ssh/ssh_auth_sock ] || [ "${SOCK_VALID}" = "" ] ; then
        ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
    fi
fi

# Try to kick off (or reconnect to) tmux
if command -v tmux &> /dev/null && [ -n "$PS1" ] && \
        [[ ! "$TERM" =~ "screen" ]] && [[ ! "$TERM" =~ "tmux" ]] && [ -z "$TMUX" ] \
        && [[ "$TERM_PROGRAM" != "vscode" ]]; then
    TERM=xterm-256color tmux new -A -s default
fi

